@page "/login"
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage
@inject HttpClient Http

<EditForm Model="usuario" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label for="username">Usuario</label>
        <InputText id="username" @bind-Value="usuario.Email" class="form-control"></InputText>
        <ValidationMessage For="() => usuario.Email" />
    </div>
    <div class="form-group">
        <label for="password">Contrase√±a</label>
        <InputText id="password" @bind-Value="usuario.Password" type="password" class="form-control"></InputText>
        <ValidationMessage For="() => usuario.Password" />
    </div>
    <br />
    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>

<AuthorizeView Roles="Admin">
    <NotAuthorized>No tienes rol</NotAuthorized>
    <Authorized>
        De verdad eres admin!!!!!
    </Authorized>
</AuthorizeView>

@code {
    private User usuario = new User();

    async Task HandleLogin() {
        var result = await Http.PostAsJsonAsync("api/auth/login", usuario);
        var token = await result.Content.ReadAsStringAsync();
        await LocalStorage.SetItemAsync("token", token);
        await AuthStateProvider.GetAuthenticationStateAsync();
    }
}