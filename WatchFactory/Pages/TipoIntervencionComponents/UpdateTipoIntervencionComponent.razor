@page "/tipointervencion/{id:int}"
@attribute [Authorize(Policy = "AdminPolicy")]
@inject ITipoIntervencionService TipoIntervencionService
@inject NavigationManager NavigationManager

<PageTitle>Crear un nuevo Tipo de Intervencion</PageTitle>
<h3>Nuevo Tipo de Intervencion</h3>

<EditForm Model="Dto" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />

    <label for="descripcion">Descripcion</label>
    <InputText id="descripcion" class="form-control" @bind-Value="Dto.Descripcion"></InputText>
</EditForm>
<button type="submit" class="btn btn-primary">Actualizar</button>
<button type="button" class="btn btn-danger" @onclick="DeleteSubmit">Eliminar</button>

@code {
    [Parameter]
    public int Id { get; set; }

    UpdateTipoIntervencionDto Dto = new UpdateTipoIntervencionDto();

    protected override async Task OnParametersSetAsync()
    {
        var tipo = await TipoIntervencionService.GetTipoIntervecionById(Id);
        Dto.Descripcion = tipo.Descripcion;
    }

    async Task HandleSubmit()
    {
        await TipoIntervencionService.UpdateTipoIntervecion(Id, Dto);
        NavigationManager.NavigateTo("/tiposintervencion");
    }

    async Task DeleteSubmit()
    {
        await TipoIntervencionService.DeleteTipoIntervencion(Id);
        NavigationManager.NavigateTo("/tiposintervencion");
    }
}
